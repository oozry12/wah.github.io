<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[温柔而坚定的声音]]></title>
      <url>/05/git.html</url>
      <content type="html"><![CDATA[<blockquote><p>忙碌的小日子</p></blockquote><h3 id="久违的声音"><a href="#久违的声音" class="headerlink" title="久违的声音"></a>久违的声音</h3><p>听了一场“金大哥”的演唱会<br>大七电台，菜鸟主播，哈哈哈。</p><h3 id="美味的水果"><a href="#美味的水果" class="headerlink" title="美味的水果"></a>美味的水果</h3>]]></content>
      
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo更新记录]]></title>
      <url>/08/hexo-modify.html</url>
      <content type="html"><![CDATA[<blockquote><p>仅以此文记录博客折腾过程 方便回滚检查</p></blockquote><h3 id="回归disqus评论"><a href="#回归disqus评论" class="headerlink" title="回归disqus评论"></a>回归disqus评论</h3><p>2018-05-01更新<br>兜兜转转 伊人还在</p><h3 id="换主题"><a href="#换主题" class="headerlink" title="换主题"></a>换主题</h3><p>2017-08-13 更新<br>感谢 @ <a href="https://imys.net/" target="_blank" rel="external">Yusen</a> 的[indigo 主题] (<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">https://github.com/yscoder/hexo-theme-indigo</a>)<br>比较简洁的MD风格</p><p>感谢 @ <a href="https://keyin.me/" target="_blank" rel="external">Kevin Tan</a><br>非常优秀的MD风格的博客UI</p><h3 id="增加评论系统"><a href="#增加评论系统" class="headerlink" title="增加评论系统"></a>增加评论系统</h3><p>感谢 @ <a href="https://github.com/gitalk" target="_blank" rel="external">gitalk</a><br>基于issues页面 超级方便移植入静态博客 友好化时间提醒<br>展望：加入@ 回复提醒。加入评论者来源平台 浏览器 etc</p><p>To be continued</p>]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[清风拂面]]></title>
      <url>/08/%E6%B8%85%E9%A3%8E%E6%8B%82%E9%9D%A2.html</url>
      <content type="html"><![CDATA[<blockquote><p>风起云涌 笑看人生</p></blockquote><p>发现欠了一堆书债。</p><ul><li>技术类的 matlab nodejs</li><li>专业类的</li><li>管理学 心理学类的</li><li>刷Kindle</li></ul><blockquote><p>远离无效社交 养定力</p></blockquote>]]></content>
      
        
        <tags>
            
            <tag> mood </tag>
            
            <tag> daily </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[天气好热啊]]></title>
      <url>/08/summer.html</url>
      <content type="html"><![CDATA[<blockquote><p>据说夏天和高温很配哟</p></blockquote><h3 id="很多人都抱怨天气太热，私以为现在的夏天体感温度确实是比以前的日子高。"><a href="#很多人都抱怨天气太热，私以为现在的夏天体感温度确实是比以前的日子高。" class="headerlink" title="很多人都抱怨天气太热，私以为现在的夏天体感温度确实是比以前的日子高。"></a>很多人都抱怨天气太热，私以为现在的夏天体感温度确实是比以前的日子高。</h3><h3 id="高楼林立，空调猛吹。废气乱排，恶性循环。"><a href="#高楼林立，空调猛吹。废气乱排，恶性循环。" class="headerlink" title="高楼林立，空调猛吹。废气乱排，恶性循环。"></a>高楼林立，空调猛吹。废气乱排，恶性循环。</h3><p><code>出来混，总要还的</code></p>]]></content>
      
        
        <tags>
            
            <tag> mood </tag>
            
            <tag> daily </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Migrate to Hexo]]></title>
      <url>/07/new-hexo-blog.html</url>
      <content type="html"><![CDATA[<h1 id="博客正式遷移到Hexo"><a href="#博客正式遷移到Hexo" class="headerlink" title="博客正式遷移到Hexo"></a>博客正式遷移到Hexo</h1><h2 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h2><ul><li><p>徘徊于WordPress 迷茫于VPS</p></li><li><p>糾結選哪個blog framework安家</p></li><li><p>猛然發現平台真的不重要 折騰的心應該focus于內容</p></li><li><p>希望得到舒適恬靜描描畫畫feelings （而不是臃腫擔心的後台admin）</p></li></ul><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ul><li>簡潔優美的書寫環境</li><li>輕鬆快捷的發佈服務端</li><li>意外極端情況的應急修復能力</li></ul><a id="more"></a><h2 id="擼起褲腿-思路-實現"><a href="#擼起褲腿-思路-實現" class="headerlink" title="擼起褲腿 思路+實現"></a>擼起褲腿 思路+實現</h2><pre><code>本地測試環境 
(現有)OS:win7 64bit  text編輯器：notepad++
(即將搭建)
[git](http://git-scm.com/ ) 
[node.js npm](https://www.nodejs.org/)
[hexo 基於node.js靜態博客生成處理工具](http://hexo.io/)

遠程服務端環境
支持靜態化html解析的Github Pages
</code></pre><h2 id="本地-local-environment-setup"><a href="#本地-local-environment-setup" class="headerlink" title="本地 local environment setup"></a>本地 local environment setup</h2><p>1.win平台安裝git <a href="http://git-scm.com/downloads" target="_blank" rel="external">官方地址 下載安裝即可</a></p><p>2.本地安裝node.js <a href="http://nodejs.org/dist/v0.10.27/x64/node-v0.10.27-x64.msi" target="_blank" rel="external">node-v0.10.27-x64(選合適的版本)</a></p><p>3.安裝hexo <code>$ npm install hexo -g</code> 非常簡潔</p><p><strong>至此，本地配置完成，搭好高樓大廈的骨架，要準備充實內容啦~</strong></p><h2 id="服務端-remote-environment-setup"><a href="#服務端-remote-environment-setup" class="headerlink" title="服務端 remote environment setup"></a>服務端 remote environment setup</h2><p>4.開通github賬號 <a href="http://github.com" target="_blank" rel="external">官方註冊</a></p><p>5.新建repo 以xxxx.github.io命名的repository <strong>建立pages的重要關鍵</strong></p><p>至此，可以用<a href="https://github.com/xxxx/xxxx.github.io" target="_blank" rel="external">https://github.com/xxxx/xxxx.github.io</a> 訪問到新建的repo</p><p>（換言之確保 git clone <a href="https://github.com/xxxx/xxxx.github.io.git" target="_blank" rel="external">https://github.com/xxxx/xxxx.github.io.git</a> 可以正常）</p><p>6.打開剛剛的repo主頁，點擊項目的setting(URI直接進入)<a href="https://github.com/xxxx/xxxx.github.io/settings" target="_blank" rel="external">https://github.com/xxxx/xxxx.github.io/settings</a> 點擊Github Pages自動生成默認的頁面</p><p><strong>至此可以通過xxxx.github.io訪問默認頁面了</strong>（首次生效可能需要10min）</p><p><strong>切換回本地操作</strong></p><h2 id="0-利用ssh方式使用git"><a href="#0-利用ssh方式使用git" class="headerlink" title="0.利用ssh方式使用git"></a>0.<strong>利用ssh方式使用git</strong></h2><ul><li><p>每次輸入賬號密碼簡直反人類</p></li><li><p>利用ssh更安全快捷</p></li><li><p>原理：客戶端生成的public key反饋回服務端得到認證 以後server-client通信就利用key匹配</p></li><li><p>媽媽再也不用擔心我輸入密碼啦~</p></li></ul><p>進入Git Bash命令行 輸入</p><pre><code>git config --global user.email &quot;your@email.com&quot;
git config --global user.name &quot;yourname&quot;
</code></pre><p>這兩步是設定客戶端的全局名稱和郵件信息（僅僅是標識作用 郵箱用戶名隨便填）</p><p><strong>生成秘鑰</strong></p><pre><code>ssh-keygen -t rsa -C &quot;your@email.com&quot;
</code></pre><p>一路按 Enter 確認 最後得到秘鑰</p><pre><code>Your identification has been saved in x:\x\.ssh\id_rsa
Your public key has been saved in x:\x\.ssh\id_rsa.pub
The key fingerprint is:
xx:xx:xx:xx:xx:ab:c1:50:10:40:0a:ba:c1:xx:xx:xx 
</code></pre><p>然後,用文本编辑器打开<strong>id_rsa.pub</strong>文件,拷贝其中的内容,将其添加到 <a href="https://github.com/settings/ssh" target="_blank" rel="external">官方Github add ssh key</a></p><p><strong>這一步目的是讓服務端認識客戶端 進行授權操作repo</strong>。</p><p>最後 執行命令</p><pre><code>ssh -T git@github.com
</code></pre><p>提示已經授權代表成功 告別https密碼登陸啦啦啦 （忽視warning）</p><h2 id="1-利用hexo初始化博客"><a href="#1-利用hexo初始化博客" class="headerlink" title="1.利用hexo初始化博客"></a><strong>1.利用hexo初始化博客</strong></h2><p>本地新建博客主目錄 例如blog</p><pre><code>hexo init &lt;folder&gt;
</code></pre><p>完成<strong>主程序</strong>初始化 此時blog目錄應該create了很多文件 默認目錄結構</p><pre><code>├── node_modules
├── scaffolds
├── scripts
├── source
|   ├── _drafts
|   └── _posts
├── themes
├── _config.yml
└── package.json
</code></pre><p>根據程序默認配置 生成靜態博客文件</p><pre><code>hexo generate
</code></pre><p>此時，主目錄下多了個子目錄 <code>public</code> 裡面就是整個博客的所有的靜態文件。</p><p>進行本地預覽調試 啟動本地服務器 默認4000端口</p><pre><code>hexo server
</code></pre><p>現在通過 <code>https://localhost:40000</code> 就可以看到剛剛生成的博客了</p><p>但這<strong>僅僅</strong>是本地可以訪問 （我們必須把它發佈到服務器 看下文）</p><h2 id="2-發佈博客到Github-Pages服務器"><a href="#2-發佈博客到Github-Pages服務器" class="headerlink" title="2.發佈博客到Github Pages服務器"></a><strong>2.發佈博客到Github Pages服務器</strong></h2><pre><code>cd切換回博客的主目錄 前述的blog 
</code></pre><p><strong>思路</strong></p><ul><li><p>2.1先把遠程的repo clone到本地</p></li><li><p>2.2再刪除<strong>github默認的pages文件</strong></p></li><li><p>2.3上傳更新我們的新的博客靜態文件</p></li></ul><p><strong>2.1 先把遠程的repo clone到本地</strong></p><pre><code>git clone git@github.com:xxxx/xxxx.github.io.git
</code></pre><p><strong>2.2 再刪除github默認的pages文件</strong></p><pre><code>git rm -rf *
git commit -m &apos;delete origin pages files&apos;
git push origin master
</code></pre><p>到這裡 已經把原來的pages文件刪除 清空完 可以放新文件上去了</p><p><strong>2.3上傳更新我們的新的博客靜態文件</strong></p><p>hexo原生支持發佈到Github的遠程服務端，因而只需修改全局配置文件<code>_config.yml</code> 就可以方便更新Github Pages了</p><p>用notepad++打開<code>_config.yml</code> 修改</p><pre><code># Deployment
## Docs: http://hexo.io/docs/deployment.html
deploy:
  type: github
  repo: git@github.com:xxxx/xxxx.github.io.git
  branch: master
</code></pre><p>更多<code>_config.yml</code> 修改 <a href="http://hexo.io/docs/" target="_blank" rel="external">看官方docs</a></p><p>最後 執行 <code>hexo deploy -g</code> 就成功發佈到Github Pages了</p><p><strong>驗證</strong></p><p>通過能訪問 <a href="http://xxxx.github.io" target="_blank" rel="external">xxxx.github.io</a> 即證明成功publish</p><p><strong>恭喜你 到現在終於把基本博客的最基本完成啦~（碼字君好累啊）</strong></p><h2 id="3-進階配置-advanced-settings"><a href="#3-進階配置-advanced-settings" class="headerlink" title="3.進階配置 advanced settings"></a>3.進階配置 advanced settings</h2><p><strong>3.1 hexo發佈過程全解析</strong></p><p><strong>理順過程</strong></p><ul><li><p>1.hexo new ‘hello-world’ 本地編寫文章</p></li><li><p>2.hexo generate 生成靜態</p></li><li><p>3.hexo server 打開本地服務端 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 調試</p></li><li><p>4.hexo deploy 發佈到遠端服務器</p></li></ul><p><strong>看清原理</strong>（對應上面過程來分析）</p><ul><li><p>1.hexo調用node.js生成.md文件 默認路徑<code>source\_posts\xx.md</code></p></li><li><p>2.hexo依據默認配置 生成靜態文件 默認生成在子目錄<code>public</code> 內</p></li><li><p>3.hexo利用web服務器開啟本地web服務</p></li><li><p>4.拷貝<code>public</code> 到<code>.deploy</code> 再執行git命令 讀取<code>_config.yml</code> 的deploy參數，<code>git add .</code> <code>git commit -m &#39;CommitMessage&#39;</code> <code>git push origin [branch]</code></p></li></ul><p><strong>升華小結下</strong></p><p>1.直接在相應目錄建立文件,再deploy的效果和<code>hexo new new-post-article</code>一樣，<strong>eg.在<code>source\_posts</code>下直接新建<code>xx.md</code>文件等效于<code>hexo n xx</code> (新建pages同理)</strong></p><p>2.<strong>手動執行<code>git add .</code> <code>git commit -m &#39;CommitMessage&#39;</code> <code>git push origin [branch]</code> 等效同理于<code>hexo deploy</code></strong></p><p>故此 以後熟悉后直接變成<strong>兩個步驟</strong></p><pre><code>hexo new &apos;new-post-article&apos;
hexo d -g 
</code></pre><p>稍等服務端就生效（最長10min）</p><p>hexo常用命令</p><pre><code>hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy
</code></pre><h2 id="3-2-博客站點個性化-sites-customization"><a href="#3-2-博客站點個性化-sites-customization" class="headerlink" title="3.2 博客站點個性化 sites customization"></a>3.2 博客站點個性化 sites customization</h2><p><strong>3.2.1 global settings</strong></p><p>全局設置在博客主目錄下 （前例blog）的<code>_config.yml</code> 中<br>默認配置如下 更多查看<a href="http://hexo.io/docs/configuration.html" target="_blank" rel="external">官方docs</a> 挺全面的<br>主要修改：站點簡介、固定鏈接、默認目錄、主題theme選擇、發佈deploy方式等。</p><pre><code>title: Hexo
subtitle:
description:
author: John Doe
email:
language:
url: http://yoursite.com
root: /
permalink: :year/:month/:day/:title/
tag_dir: tags
archive_dir: archives
category_dir: categories
code_dir: downloads/code
new_post_name: :title.md
default_layout: post
auto_spacing: false
titlecase: false
filename_case: 0
render_drafts: false
post_asset_folder: false
relative_link: false
highlight:
  enable: true
  line_number: true
  tab_replace:
default_category: uncategorized
category_map:
tag_map:
archive: 2
category: 2
tag: 2
port: 4000
logger: false
logger_format:
date_format: MMM D YYYY
time_format: H:mm:ss
per_page: 10
pagination_dir: page
disqus_shortname:
theme: light
exclude_generator:
deploy:
  type:
</code></pre><p><strong>3.2.2 主題配色優化 theme customization</strong></p><p>主目錄下子目錄 <code>theme</code> 為主題文件夾所在,而 <a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">官方hexo theme wiki參考</a> 童靴們也可以自己寫add進去</p><ul><li><p>找到合適的 copy進來就好 git clone也行 whatever u like</p></li><li><p>最後配置 <code>_config.yml</code> options中的<code>theme： 改為新主題名</code> (注意冒號：後面先加個space空格鍵 不然報錯)</p></li></ul><p><strong>3.2.3 添加插件 新建頁面</strong></p><p>添加插件</p><p><a href="http://hexo.io/docs/plugins.html" target="_blank" rel="external">官方說明不錯</a> 瞄瞄吧 碼字好苦啊~</p><p>添加頁面等</p><pre><code>hexo new page &apos;page-name&apos;
</code></pre><p><strong>3.2.4 添加自定義域名</strong></p><p>感謝開源程序與大家無私的精神 終於可以通過 <a href="http://xxxx.github.io" target="_blank" rel="external">http://xxxx.github.io</a> 訪問您的博客啦~~</p><p>however 這個在github.io下的子域名有點長或者不爽的</p><p>Github Pages支持用自定義域名 <code>萬惡的資本主義想得好周到嘛~</code></p><p><strong>兩種情況</strong></p><p><strong>1.有<code>example.com</code> 這樣的由頂級域名下的域名</strong>（叫一級域名？who knows）</p><ul><li><p>到repo目錄下新建 <code>CNAME</code> 文件，該文件只有一行，只需填 <code>example.com</code></p></li><li><p>ping dig traceroute xxxx.github.io的ip 找最快最穩定的</p></li><li><p>到DNS服務商修改 <code>example.com</code> 的A 記錄指向 剛剛的ip</p></li><li><p>drink a cup of coffee and visit <a href="http://example.com" target="_blank" rel="external">http://example.com</a> Enjoy it!</p></li></ul><p><strong>2.有<code>abc.example.com</code> 的子域名</strong></p><ul><li><p>到repo目錄下新建 <code>CNAME</code> 文件，該文件只有一行，只需填 <code>abc.example.com</code></p></li><li><p>到DNS服務商修改 <code>abc.example.com</code> 的CNAME 記錄指向 <code>abc.example.com</code></p></li></ul><p><a href="https://help.github.com/articles/about-custom-domains-for-github-pages-sites" target="_blank" rel="external">more details!</a></p><p>To be continued (額 手抽筋啦)…..</p><p>PS:</p><p>long time no write something elegantly with pure purpose.</p><p>有問題歡迎留言哈 輕輕拍就好 LOL</p>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[make some rules]]></title>
      <url>/07/make-rule-for-life.html</url>
      <content type="html"><![CDATA[<blockquote><p>For a better and healthy life,I have to make an effort to change my lifestyle .</p></blockquote><h2 id="share-my-own-time"><a href="#share-my-own-time" class="headerlink" title="share my own time"></a>share my own time</h2><ul><li><p>13:00~14:00 no need to care about my head teacher job.Just have a rest.</p></li><li><p>22:00~6:30 time for reading my favorite book ,enjoy the music and sleep with heart and soul.</p></li><li><p>In my office,take a headphones for doing my reviewing textbook.</p></li></ul><h2 id="buy-more-fruits-and-milk"><a href="#buy-more-fruits-and-milk" class="headerlink" title="buy more fruits and milk"></a>buy more fruits and milk</h2><ul><li>buy fruits on Monday.No fruits,no health.</li><li>buy milk and other little chocolate at the nearby supermarket twice a week.</li><li>buy small lovely items online to enrich daily life.</li></ul><h2 id="do-exercises"><a href="#do-exercises" class="headerlink" title="do exercises"></a>do exercises</h2><ul><li>badminton.Once a week with my colleague.</li><li>running.In the playground,music night.</li><li>go to gym.Never late.Fitness is now now now.</li></ul>]]></content>
      
        
        <tags>
            
            <tag> lifes </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[those days]]></title>
      <url>/07/old-day.html</url>
      <content type="html"><![CDATA[<blockquote><p>前尘往事</p></blockquote><p>当年大学教授刚好在讲授《MATLAB》这门课，正好之前数学建模竞赛经常用到。基本的内容也就熟悉，后面刘教授一时高兴，拿了一篇在生物数学之类的著名期刊发表的全英的论文，叫我们练练手。读懂论文，再利用MATLAB添加相应的示意图。</p><p>玩着玩着，也挺有趣。据说最后我画出的图，与题目论述的问题比较接近。哇咔咔。</p><p>贼高兴，当时围脖写下感想：</p><blockquote><p>传说中的 混沌现象“<a href="https://en.wikipedia.org/wiki/Bifurcation_theory" target="_blank" rel="external">分岔图</a>”，真心觉得 算法的优化很重要，不然多强悍的CPU都扛不住，话说i3 的CPU也算了15分钟，算法优化是尽量 可以打包输出再统一处理，别一步步都调用循环。</p></blockquote><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://imglf6.ph.126.net/_jQjrj6BGtziRVCYkz48Bw==/2598014035056844566.jpg" alt="alt" title="改变参数"></div><div class="image-caption">改变参数</div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://imglf3.ph.126.net/aHWvhsAQ5hD3p1QtGSLRlQ==/3067514296210023653.jpg" alt="alt"></div><div class="image-caption">alt</div></figure><p><img src="http://imglf3.ph.126.net/1gG-ePXZcWLv_eROF_3c4g==/207165582876104663.jpg" alt="alt" title="最终论文上的图"></p><p>其实，无忧无虑，单纯读读paper。写写abstract。科研也挺好玩的~~（虽然现在忙成狗）</p>]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xposed for Android N]]></title>
      <url>/07/xposed-for-n.html</url>
      <content type="html"><![CDATA[<p>据说最新xposed支持Android 7.x系统，大家一片欢呼，等得不要太久。简直饥渴啊。高兴是高兴，咱还要理性看待。<br>但是，请大家注意慎重考虑，原因如下：</p><p>1、开发者并非xposed的原创rovo89大神，目前所有的项目都是基于abforce这位开发者</p><p>2、xposed框架功能非常强大，是系统层级的修改，代码质量与维护水平影响到整个手机系统的稳定性，可能随时崩溃</p><p>3、Android生态圈比较开放自由，鱼龙混杂，在所谓的刷机包内可能嵌入恶意代码，恶意扣费推广之类</p><p>4、原创作者早就完成这一步骤，但很快抛弃这一想法，正在提高框架稳定性。目前很多模块没更新，框架有了没模块用</p><p>&lt;–read more&gt;</p><p>———————————————————-（分割线 下面是这个项目的一些来龙去脉）——————————-</p><blockquote><p><strong>缘起</strong></p></blockquote><p>开发者abforce感觉很久没框架用，在github给rovo89大神发issues要他帮忙写开发文档，给包括他在内的有时间的开发者开发xposed_art_n。<br>而rovo89据说在搬家没太多空开发。开发者abforce之后直接嘲笑他，是不是玩其他小东西去了没时间了。<br>原话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">What do you think? Do you have time for this or would prefer to still enjoy your life (and possibly playing with your puppies)?</div></pre></td></tr></table></figure><blockquote><p><strong>再次邂逅</strong></p></blockquote><p>后面 ‘abforce’ 君强硬魔改了很多代码，再集成到系统内，然后要求 ‘rovo89’ 帮忙review代码，并且diff出不同项目的区别。<br>rovo89回应道：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The actual implementation is the smallest part of developing Xposed. Getting the knowledge about how the ART compiler and runtime works and finding ways to integrate Xposed with maximum compatiblity is the most time-consuming and complex part. Books could be written about the small, yet very important details that have to be considered. Sometimes when I understood how a particular implementation works and which tricks they&apos;re using, I indeed think I should write something up about it, but that would take me even more time (which I currently don&apos;t have).</div></pre></td></tr></table></figure><p>（大概意思是新版本的ART机制很复杂，他正在研究破译内部技巧，而对于兼容性的探索是最耗时间也是最难的部分，他在记录一些，但不可能抽出大片空白时间写这么宏大的开发文档）</p><blockquote><p><strong>再度回应</strong>：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Congrats ;) Unfortunately, I can&apos;t review your changes, it&apos;s just too much and I don&apos;t remember all those details where I deviated from simply porting the Marshmallow changes and which additional changes were required to make it reliable (i.e. to ensure that the hooks are called even with compiler optimizations).</div><div class="line"></div><div class="line">As you already mentioned, your changes could only work for ROMs compiled from scratch with Xposed already active, so people should understand that this won&apos;t work (at least not reliably) on their stock or otherwise pre-compiled ROMs.</div></pre></td></tr></table></figure><p>（大概意思是 恭喜，呵呵。我不可能能短时间内review你的修改部分，很难回忆起来大量的仅仅只是从M版本移植到N版本细节，这些修改能否保证在编译器优化后仍然能正常使用仍然是不确定的。正如你提到的，你利用集成入系统的框架，那么就算用户理解为用处不大，或者说不靠谱。因为太多用户还在官方系统而不是预编译好的ROM）</p><blockquote><p><strong>再次交锋</strong></p></blockquote><p>abforce君再次感谢大神的回复。在发现很多的崩溃和不正常运行的问题后，再次要求rovo89君review代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">But there&apos;s a problem when GC runs, specifically I suspect that heap or stack will be malformed when XPrivacy is enabled.</div><div class="line"></div><div class="line">As I traced down the error, the problem seems to be related to visiting roots when GC marks objects. Moving form M to N, just one of your commits I couldn&apos;t port directly, that of ArtMethod::VisitRoots.</div><div class="line"></div><div class="line">Also enabling hook resources causes the problem when GC runs, are you sure your modified Object.Clone() doesn&apos;t cause memory issues?</div></pre></td></tr></table></figure><p>（大概意思是有些模块如XPrivacy 报错，他搞不懂一些问题）</p><blockquote><p><strong>高潮</strong></p></blockquote><p>开源手机界瞬间炸开了锅。很多开发者简单地利用abforce君的简单教程，集成编译了很多roms，但全部都是基于他的代码，大部分也可以开机，并且有些模块看似正常运行。</p><blockquote><p><strong>再次澄清表态</strong></p></blockquote><p>今天5小时前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Surprisingly by porting M changes to N everything works well,</div><div class="line">From my experience, I can tell you that it&apos;s indeed not that hard to get the basics done, but it takes a hell lot of time for the details. It&apos;s like the 80-20 rule, except that it&apos;s more like 95-5 or so.</div><div class="line"></div><div class="line">The hooking approach I have designed for the previous releases is rather stable and can be applied for newer releases as well. I assume you needed most of the time to check all the places where IsProxyMethod() and IsDirect() is called and decide whether they should consider the new method modifier or not (i.e. use parameter true or not). If you didn&apos;t do that, you might have missed some places where they have newly introduced such calls. Same for methods like InstallStubsForMethod(), which needs to operate on the original original method even when they&apos;re called for a hooked method. You&apos;d need to check for more places where this could be relevant. That&apos;s still in the range of days, but if you miss to do it, you might see obscure crashes or misbehavior that are very hard to debug.</div><div class="line"></div><div class="line">Besides that, you took an approach where hooks would only work properly for ROMs which are entirely compiled from scratch. On stock ROMs and even most custom ROMs (that didn&apos;t include your port while building) as well as for any apps the device might have compiled before. So you&apos;d have to start all over again with a wiped device running a special ROM. If not, then optimizations (e.g. inlining) might prevent a method from being called at all, and hence hooks wouldn&apos;t work. The worst thing about this is that the exact behavior would depend on the ROM, or even how the user uses the device (now that apps are compiled based on profiles). Modules would fail randomly and the module developers would be wondering what they did wrong (answer: nothing). If not all of the prerequisites are fulfilled, it&apos;s a pretty unreliable API. Imagine Google published an update where the OnClickListener of a button wasn&apos;t called sometimes, unless you compiled your ROM from scratch... For me personally, this is a big limitation.</div><div class="line"></div><div class="line">There is a flashable xposed for N available here:</div><div class="line">https://forum.xda-developers.com/xposed/unofficial-xposed-v87-unofficial-yes-im-t3639192</div><div class="line">It seems like it&apos;s for AOSP ROMs</div><div class="line">Their code is @abforce&apos;s port, with all the limitations I listed above. :roll_eyes: It doesn&apos;t make sense at all to publish flashable ZIPs with this, as the port is only intended for recompiling a ROM from scratch.</div><div class="line">And as I feared, there is not a single warning that this is an incomplete port that will often fail to fulfill the API contract. :angry: That&apos;s bad for developers and users, they should at least know it&apos;s incomplete so they can decide whether they want to support/use it. I would never dare to do something like that without a big fat warning. Actually, as I&apos;m rather perfectionist, I wouldn&apos;t publish an incomplete version at all, reliablity is very important for me.</div><div class="line"></div><div class="line">I just checked my Git log and I had the basic hooking (as in this port) ready in October. Since then, I have worked on removing the limitations. To make it more reliable on pre-compiled ROMs, I could have ported the recompiling part as well, however that&apos;s still not ideal. As explained somewhere above, we have JIT now, which allows us to keep all the optimizations, only invalidating (and possibly recompiling) the methods which are directly affected by hooking. This is quite challenging, as it&apos;s more than just copy &amp; paste. And until this isn&apos;t done, I won&apos;t publish anything. 9 months for that (until now) is really a long time, I know, but hey, it&apos;s my spare time and e.g. due to moving to a new apartment, I couldn&apos;t work on Xposed for several months (!) at all, and had only very limited time otherwise.</div><div class="line"></div><div class="line">As I traced down the error, the problem seems to be related to visiting roots when GC marks objects.</div><div class="line">Also enabling hook resources causes the problem when GC runs, are you sure your modified Object.Clone() doesn&apos;t cause memory issues?</div><div class="line">I just commented on your diff. There&apos;s no real difference in my code for these two methods, so you&apos;ll have to debug it yourself. I know this can be hard, as the real culprit can sometimes be in a totally different place. Even if it ends up to be a single character that needs to be changed, you can easily spend dozens of hours on debugging one issue. That said - if you&apos;re seriously interested in contributing, this might be a good challenge. :wink:</div></pre></td></tr></table></figure><p>（大概意思是基础部分，移植过去不难，但是正如著名的二八定律，后面更耗时间更困难。我之前的代码设计都可以沿用到新版本，如果只关注局部，后期你将很难debug排查整个项目的bug。基于必须集成入ROM，如果遇到奇怪的设备或者系统，你将要从头编译排查。因为这种不兼容性，很多模块会随机性地出错。对于完美主义者的我，我绝对不会发布任何没完成的有巨大风险的项目代码，可靠性是我的第一标准。回顾我的代码提交记录，早在去年10月我都完成这部分工作，自从那以后，我一直致力于研究可靠性与兼容性。在我个人时间里，我搬家花费了不少，但我还是投入开发研究。我已经检查了你的修改，并没有太多的新的东西，所以你需要自己排查。最后祝你迎接挑战，好好加油）</p><blockquote><p><strong>最后忠告</strong></p></blockquote><p>rovo89说道：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">And just to add to my reply above: Imagine I published my current WIP now. I bet that some people would publish it as their build, without any warnings that it&apos;s incomplete and not intended to be used productively.</div></pre></td></tr></table></figure><p>（大概意思是希望大家附上我的忠告，这些不完整的修改不应该用在生产环境）</p><p>以上原文全部在github中。酷安，和微博也有 各路大神（包括吴大）的看法与说明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">github.com/rovo89/Xposed/issues/230</div><div class="line">abforce的代码项目 github.com/abforce/xposed_art_n</div></pre></td></tr></table></figure><p>全程手打。理性分析。大神轻轻拍。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.oneplus.cn/data/attachment/forum/201707/20/204103fr0v07a3sx08et74.png.w_768.png" alt="1"></div><div class="image-caption">1</div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.oneplus.cn/data/attachment/forum/201707/20/204103v0htzvhxughxvthh.png.w_768.png" alt="2"></div><div class="image-caption">2</div></figure>]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> xposed </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
